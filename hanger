#!perl

# This program only exists to figure out why perl 5.12.0 RC1 hangs when
# trying to test PUT in Test::WWW::Mechanize.

use strict;
use warnings;
use Test::More;
use Test::Builder::Tester;

use constant NONEXISTENT => 'http://blahblablah.xx-nonexistent.';
BEGIN {
    if ( gethostbyname( 'blahblahblah.xx-nonexistent.' ) ) {
        plan skip_all => 'Found an A record for the non-existent domain';
    }
}

BEGIN {
    plan tests => 12;
    use_ok( 'WWW::Mechanize' );
}

use lib 't';

my $server      = HangServer->new;
$server->background;
my $server_root = $server->root;

use WWW::Mechanize;

my $mech = WWW::Mechanize->new;

GOOD_GET: {
    my $goodlinks = "$server_root/goodlinks.html";
    $mech->get( $goodlinks );
    ok( $mech->success, "I was able to get $goodlinks" );
    {use Data::Dumper; local $Data::Dumper::Sortkeys=1;
        print Dumper( $mech )}
}

print "\n\nHit enter to do a PUT";
my $f = <>;

GOOD_GET: {
    my $scraps = "$server_root/scraps.html";
    $mech->put( $scraps );
    ok( $mech->success, "I was able to put $scraps" );
    {use Data::Dumper; local $Data::Dumper::Sortkeys=1;
        print Dumper( $mech )}
    print "=== content ===\n";
    print $mech->content, "\n";
    print "=== content ===\n";
}

print "\n\nHit enter to down the server";
$f = <>;

$server->stop;

print "Server stopped\n";

exit;


package HangServer;

use warnings;
use strict;

BEGIN {
    delete $ENV{http_proxy}; # All our tests are running on localhost
}

use base 'HTTP::Server::Simple::CGI';

use Carp ();

our $pid;

sub new {
    my $class = shift;

    die 'An instance of HangServer has already been started.' if $pid;

    # XXX This should really be a random port.
    return $class->SUPER::new(13432, @_);
}

sub run {
    my $self = shift;

    $pid = $self->SUPER::run(@_);

    $SIG{__DIE__} = \&stop;

    return $pid;
}

sub handle_request {
    my $self = shift;
    my $cgi  = shift;

    use Data::Dumper; local $Data::Dumper::Sortkeys=1;
    my $response = Dumper($cgi);
    print "HTTP/1.0 200 OK\r\n";
    print "Content-Type: text/html\r\nContent-Length: ", length($response), "\r\n\r\n", $response;
    return;

    my $file = (split( /\//,$cgi->path_info))[-1]||'index.html';
    $file    =~ s/\s+//g;

    my $filename = "t/html/$file";
    if ( -r $filename ) {
        if (my $response=do { local (@ARGV, $/) = $filename; <> }) {
            print "HTTP/1.0 200 OK\r\n";
            print "Content-Type: text/html\r\nContent-Length: ", length($response), "\r\n\r\n", $response;
            return;
        }
    }

    print "HTTP/1.0 404 Not Found\r\n\r\n";

    return;
}

sub background {
    my $self = shift;

    $pid = $self->SUPER::background()
        or Carp::confess( q{Can't start the test server} );

    sleep 1; # background() may come back prematurely, so give it a second to fire up

    return $pid;
}

sub root {
    my $self = shift;
    my $port = $self->port;

    return "http://localhost:$port";
}

sub stop {
    if ( $pid ) {
        kill( 9, $pid ) unless $^S;
        undef $pid;
    }

    return;
}

1;
